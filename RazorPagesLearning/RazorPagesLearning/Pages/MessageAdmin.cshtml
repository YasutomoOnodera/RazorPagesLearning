@page
@using RazorPagesLearning.Data.Models
@model RazorPagesLearning.Pages.MessageAdminModel
@{
    MESSAGE_ADMIN messageAdminModel = null;
    string message = null;
    ViewData["Title"] = "MessageAdmin";
}

<form method="POST" id="MessageAdminForm">

    <!-- メインレイアウト__2カラム -->
    <article id="Message" class="p-main-wrap">
        <section>
            <h1>メッセージ編集</h1>
            <article>
                <article class="p-buttom-wrap">
                    <button type="button" class="o-button__done submit" data-toggle="modal" data-target="#exampleModalLong" id="update_button">更新</button>
                </article>
                <div class="o-border__bold mb-4"></div>
                <!-- ログイン画面 -->
                <article class="form-group">
                    <div class="d-flex mb-2">
                        <div class="o-title__blank">
                            <div>ログイン画面</div>
                        </div>
                        <div class="p-datachip ml-3">
                            <h1>
                                文字色
                            </h1>
                            <p>
                                <input type="text" id="picker_login">
                            </p>
                        </div>
                        <div class="p-datachip ml-3">
                            <h1>
                                文字サイズ
                            </h1>
                            <p>
                                <select name="文字サイズ" id="size_login">
                                    <option value="1">1</option>
                                    <option value="2">2</option>
                                    <option value="3">3</option>
                                    <option value="4">4</option>
                                    <option value="5">5</option>
                                    <option value="6">6</option>
                                    <option value="7">7</option>
                                </select>
                            </p>
                        </div>
                    </div>
                    <style>
                        .horiuchi {
                            /*width: 100%;*/
                            height: 150px;
                            overflow-y: scroll;
                        }
                    </style>
                    @{
                        messageAdminModel = Model.viewModel.MESSAGE_ADMINs.SingleOrDefault(e => e.KIND == MESSAGE_ADMIN.MESSAGE_KIND.Login);
                        message = (null != messageAdminModel) ? messageAdminModel.MESSAGE : "";
                    }
                    <div name="message_login" id="message_login" cols="20" rows="7" class="form-control horiuchi" placeholder="メッセージ" contenteditable="true">@Html.Raw(message)</div>
                    <input type="hidden" asp-for="@Model.viewModel.updateModel.messageLogin" />
                </article>
                <!-- ホーム画面 -->
                <article class="form-group mt-5">
                    <div class="d-flex mb-2">
                        <div class="o-title__blank">
                            <div>ホーム画面</div>
                        </div>
                        <div class="p-datachip ml-3">
                            <h1>
                                文字色
                            </h1>
                            <p>
                                <input type="text" id="picker_home">
                            </p>
                        </div>
                        <div class="p-datachip ml-3">
                            <h1>
                                文字サイズ
                            </h1>
                            <p>
                                <select name="文字サイズ" id="size_home">
                                    <option value="1">1</option>
                                    <option value="2">2</option>
                                    <option value="3">3</option>
                                    <option value="4">4</option>
                                    <option value="5">5</option>
                                    <option value="6">6</option>
                                    <option value="7">7</option>
                                </select>
                            </p>
                        </div>
                    </div>
                    @{
                        messageAdminModel = Model.viewModel.MESSAGE_ADMINs.SingleOrDefault(e => e.KIND == MESSAGE_ADMIN.MESSAGE_KIND.Home);
                        message = (null != messageAdminModel) ? messageAdminModel.MESSAGE : "";
                    }
                    <div name="message_home" id="message_home" cols="20" rows="7" class="form-control horiuchi" placeholder="メッセージ" contenteditable="true">@Html.Raw(message)</div>
                    <input type="hidden" asp-for="@Model.viewModel.updateModel.messageHome" />
                </article>
            </article>
        </section>
    </article>
</form>
<script>
    $(document).ready(function () {
        //ページを開いたら、ローディング表示を非表示に
        VegaUtility.StaticFunctions.LoadingSplash.hide();
    });

    // 更新ボタン押下
    $('#update_button').click(function () {
        // 入力されたメッセージを取得
        $('#viewModel_updateModel_messageLogin').val($('#message_login').html());
        $('#viewModel_updateModel_messageHome').val($('#message_home').html())

        $.confirm({
            title: '更新確認',
            content: 'メッセージマスタ情報を更新してもよろしいでしょうか?',
            buttons: {
                'OK': function () {
                    var f = $('form');
                    f.attr('action', '?handler=Save');
                    f.submit();
                },
                'キャンセル': function () {
                }
            }
        });
    });

    // 色の選択肢
    let palette = [
        ["rgb(0, 0, 0)", "rgb(67, 67, 67)", "rgb(102, 102, 102)", "rgb(204, 204, 204)", "rgb(217, 217, 217)", "rgb(255, 255, 255)"],
        ["rgb(152, 0, 0)", "rgb(255, 0, 0)", "rgb(255, 153, 0)", "rgb(255, 255, 0)", "rgb(0, 255, 0)", "rgb(0, 255, 255)", "rgb(74, 134, 232)", "rgb(0, 0, 255)", "rgb(153, 0, 255)", "rgb(255, 0, 255)"],
        ["rgb(230, 184, 175)", "rgb(244, 204, 204)", "rgb(252, 229, 205)", "rgb(255, 242, 204)", "rgb(217, 234, 211)", "rgb(208, 224, 227)", "rgb(201, 218, 248)", "rgb(207, 226, 243)", "rgb(217, 210, 233)", "rgb(234, 209, 220)",
         "rgb(221, 126, 107)", "rgb(234, 153, 153)", "rgb(249, 203, 156)", "rgb(255, 229, 153)", "rgb(182, 215, 168)", "rgb(162, 196, 201)", "rgb(164, 194, 244)", "rgb(159, 197, 232)", "rgb(180, 167, 214)", "rgb(213, 166, 189)",
         "rgb(204, 65, 37)", "rgb(224, 102, 102)", "rgb(246, 178, 107)", "rgb(255, 217, 102)", "rgb(147, 196, 125)", "rgb(118, 165, 175)", "rgb(109, 158, 235)", "rgb(111, 168, 220)", "rgb(142, 124, 195)", "rgb(194, 123, 160)",
         "rgb(166, 28, 0)", "rgb(204, 0, 0)", "rgb(230, 145, 56)", "rgb(241, 194, 50)", "rgb(106, 168, 79)", "rgb(69, 129, 142)", "rgb(60, 120, 216)", "rgb(61, 133, 198)", "rgb(103, 78, 167)", "rgb(166, 77, 121)",
         "rgb(91, 15, 0)", "rgb(102, 0, 0)", "rgb(120, 63, 4)", "rgb(127, 96, 0)", "rgb(39, 78, 19)", "rgb(12, 52, 61)", "rgb(28, 69, 135)", "rgb(7, 55, 99)", "rgb(32, 18, 77)", "rgb(76, 17, 48)"]
    ];

    // 色選択
    $('[id^=picker_]').spectrum({
        showPaletteOnly: true,
        palette: palette,
        change: function (color) {
            // 選択された色を取得
            let newColor = color.toHexString();

            // テキストに反映
            document.execCommand('forecolor', false, newColor);
        }
    });

    // サイズ選択
    $('[id^=size_]').change(function () {
        // 選択されたサイズを取得
        let newSize = $("option:selected", this).val();

        // テキストに反映
        document.execCommand('fontSize', true, newSize);

        console.log(r);
    });
</script>
