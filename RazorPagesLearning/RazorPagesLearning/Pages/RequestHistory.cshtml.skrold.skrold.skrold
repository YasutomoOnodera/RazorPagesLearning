@page "{id:int?}"
@model RazorPagesLearning.Pages.RequestHistoryModel
@{
    ViewData["Title"] = "RequestHistory";
}

<!-- DataTablesを読み取るために必要なコンポーネントを取り込み -->
<partial name="_DataTablesScriptsPartial" />

<div class="p-page-title">
    荷主メニュー/
    <span>依頼履歴</span>
</div>
<article id="Request__history" class="j-slide__main">
    <form method="POST" id="RequestHistoryForm" style="height:inherit;">
        <div class="p-main-wrap__2col">
            <section id="Serch-terms" style="position: relative;">
                <article class="p-scroll__head">
                    <h1>条件指示</h1>
                    <article>
                        <article class="p-buttom-wrap">
                            <button type="submit" id="HistorySearch" class="o-button__base" asp-page-handler="list">検索</button>
                            <button type="button" id="ClearForm" class="o-button__clear">クリア</button>
                        </article>
                        <div class="o-border__bold__sm"></div>
                    </article>

                    @foreach (KeyValuePair<string, RazorPagesLearning.Pages.RequestHistoryModel.CondType> kvp in Model.viewModel.searchCondition.dispSetting)
                    {
                        string name = kvp.Key;
                        RazorPagesLearning.Pages.RequestHistoryModel.CondType cond = kvp.Value;

                        @* -------------------------------------------------- *@
                        @* 検索条件の表示に使う項目を保持するためhiddenに格納 *@
                        @* -------------------------------------------------- *@
                        <input type="hidden" asp-for=@Model.viewModel.searchCondition.dispSetting[name].id>
                        <input type="hidden" asp-for=@Model.viewModel.searchCondition.dispSetting[name].type>

                        @* チェックボックスに関しては、hiddenに登録しておくことで選択値をPOSTさせる *@
                        @if (RazorPagesLearning.Pages.RequestHistoryModel.CondType.SearchType.CheckBox_2Row == cond.type ||
                       RazorPagesLearning.Pages.RequestHistoryModel.CondType.SearchType.CheckBox == cond.type)
                        {
                            @foreach (KeyValuePair<string, string> checkBox in cond.checkBoxes)
                            {
                                <input type="hidden" name=@($"viewModel.searchCondition.dispSetting[{name}].checkBoxes.{checkBox.Key}") value="@checkBox.Value" />
                            }
                        }
                    }

                </article>
                <article class="p-scroll__body left">
                    <article class="u-wrap-mb">

                        @foreach (KeyValuePair<string, RazorPagesLearning.Pages.RequestHistoryModel.CondType> kvp in Model.viewModel.searchCondition.dispSetting)
                        {
                            @* 表示ラベル名 *@
                            string name = kvp.Key;
                            @* 検索条件のタイプ *@
                            RazorPagesLearning.Pages.RequestHistoryModel.CondType cond = kvp.Value;
                            @* 検索条件名毎の表示設定 *@
                            var dispSetting = Model.viewModel.searchCondition.dispSetting.First(e => e.Value.id == cond.id);

                            int loopCount = 0;
                            int checkBoxCount = 0;

                            string div1 = "<div " + "id=" + cond.id + @" class=""p-datachip border-none"" >";
                            string div2 = "<div " + "id=" + cond.id + @" class=""p-datachip"" >";

                            @* -------------------------------------------------- *@
                            @* チェックボックス2列表示                            *@
                            @*   type="checkbox"では状態を表示するのみで、        *@
                            @*   サーバー側にはhiddenで登録した値をPOSTする。     *@
                            @* -------------------------------------------------- *@
                            @if (RazorPagesLearning.Pages.RequestHistoryModel.CondType.SearchType.CheckBox_2Row == cond.type)
                            {
                                checkBoxCount = cond.checkBoxes.Count();

                                @Html.Raw(div1);
                                <h1>@name</h1>

                                @foreach (KeyValuePair<string, string> checkBox in cond.checkBoxes)
                                {
                                    loopCount++;

                                    @if (1 == loopCount)
                                    {
                                        @Html.Raw("<div>");
                                    }

                                    <p>
                                        @if (Model.viewModel.searchCondition.dispSetting[name].checkedDic.ContainsKey(checkBox.Key) &&
                                      Model.viewModel.searchCondition.dispSetting[name].checkedDic[checkBox.Key])
                                        {
                                            <input type="checkbox" name=@($"viewModel.searchCondition.dispSetting[{name}].checkedDic.{checkBox.Key}") checked="checked" value="true" />
                                        }
                                        else
                                        {
                                            <input type="checkbox" name=@($"viewModel.searchCondition.dispSetting[{name}].checkedDic.{checkBox.Key}") />
                                        }
                                        <span>@checkBox.Value</span>
                                    </p>

                                    @if ((checkBoxCount + 1) / 2 == loopCount)
                                    {
                                        @Html.Raw("</div>");
                                        @Html.Raw("<div>");
                                    }

                                    @if (checkBoxCount == loopCount)
                                    {
                                        @Html.Raw("</div>");
                                    }
                                }
                                @Html.Raw("</div>");
                            }
                            @* -------------------------------------------------- *@
                            @* チェックボックス                                   *@
                            @*   type="checkbox"では状態を表示するのみで、        *@
                            @*   サーバー側にはhiddenで登録した値をPOSTする。     *@
                            @* -------------------------------------------------- *@
                            else if (RazorPagesLearning.Pages.RequestHistoryModel.CondType.SearchType.CheckBox == cond.type)
                            {
                                checkBoxCount = cond.checkBoxes.Count();

                                @Html.Raw(div1);
                                <h1>@name</h1>

                                <div>
                                    @foreach (KeyValuePair<string, string> checkBox in cond.checkBoxes)
                                    {
                                        loopCount++;

                                        <p>
                                            @if (Model.viewModel.searchCondition.dispSetting[name].checkedDic.ContainsKey(checkBox.Key) &&
                                           Model.viewModel.searchCondition.dispSetting[name].checkedDic[checkBox.Key])
                                            {
                                                <input type="checkbox" name=@($"viewModel.searchCondition.dispSetting[{name}].checkedDic.{checkBox.Key}") checked="checked" value="true" />
                                            }
                                            else
                                            {
                                                <input type="checkbox" name=@($"viewModel.searchCondition.dispSetting[{name}].checkedDic.{checkBox.Key}") />
                                            }

                                            <span>@checkBox.Value</span>
                                        </p>
                                    }
                                </div>
                                @Html.Raw("</div>");
                            }
                            @* -------------------------------------------------- *@
                            @* テキスト入力(FromTo)                               *@
                            @* -------------------------------------------------- *@
                            else if (RazorPagesLearning.Pages.RequestHistoryModel.CondType.SearchType.Text_FromTo == cond.type)
                            {
                                @Html.Raw(div2);
                                <h1>@name</h1>

                                <p>
                                    <input type="text" maxlength="40" size="14" asp-for="@Model.viewModel.searchCondition.dispSetting[name].textFrom" />
                                    <span>&nbsp;〜&nbsp;</span>
                                    <input type="text" maxlength="1024" size="14" asp-for="@Model.viewModel.searchCondition.dispSetting[name].textTo" />
                                </p>

                                @Html.Raw("</div>");
                            }
                            @* -------------------------------------------------- *@
                            @* テキスト入力(AND/OR)                               *@
                            @* -------------------------------------------------- *@
                            else if (RazorPagesLearning.Pages.RequestHistoryModel.CondType.SearchType.Text_AndOr == cond.type)
                            {
                                @Html.Raw(div2);
                                <h1>@name</h1>

                                <p>
                                    @* テキスト入力 *@
                                    <input type="text" maxlength="40" size="14" asp-for="@Model.viewModel.searchCondition.dispSetting[name].text" />

                                    @* AND/OR *@
                                    @if (RazorPagesLearning.Pages.RequestHistoryModel.ReadConfig.AndOr.And == Model.viewModel.searchCondition.dispSetting[name].radio)
                                    {
                                        <input type="radio" asp-for=@Model.viewModel.searchCondition.dispSetting[name].radio value="@RazorPagesLearning.Service.DB.StockSearchService.ReadConfig.AndOr.And" checked>
                                        <span>AND</span>
                                        <input type="radio" asp-for=@Model.viewModel.searchCondition.dispSetting[name].radio value="@RazorPagesLearning.Service.DB.StockSearchService.ReadConfig.AndOr.Or">
                                        <span>OR</span>
                                    }
                                    else
                                    {
                                        <input type="radio" asp-for=@Model.viewModel.searchCondition.dispSetting[name].radio value="@RazorPagesLearning.Service.DB.StockSearchService.ReadConfig.AndOr.And">
                                        <span>AND</span>
                                        <input type="radio" asp-for=@Model.viewModel.searchCondition.dispSetting[name].radio value="@RazorPagesLearning.Service.DB.StockSearchService.ReadConfig.AndOr.Or" checked>
                                        <span>OR</span>
                                    }
                                </p>

                                @Html.Raw("</div>");
                            }
                            @* -------------------------------------------------- *@
                            @* テキスト入力                                       *@
                            @* -------------------------------------------------- *@
                            else if (RazorPagesLearning.Pages.RequestHistoryModel.CondType.SearchType.Text == cond.type)
                            {
                                @Html.Raw(div2);
                                <h1>@name</h1>

                                <p>
                                    <input type="text" maxlength="40" size="14" asp-for="@Model.viewModel.searchCondition.dispSetting[name].textFrom" />
                                </p>

                                @Html.Raw("</div>");
                            }
                        }
                        <div class="p-buttom-wrap">
                            <button type="button" class="o-button__base row2" id="deliverySearch" onclick="onShowPopSelectDerivery()">集配先検索</button>
                        </div>
                    </article>
                </article>
                <div class="p-button__arrow">
                    <div class="o-button__arrow__left j-arrow__left"></div>
                </div>
            </section>
            <section id="Serch-list">
                <article class="p-scroll__head">
                    <h1>結果一覧</h1>
                    <article>
                        <article class="p-buttom-wrap">
                            <button type="submit" asp-page-handler="Excel" class="o-button__dl">EXCEL</button>
                            <button type="submit" asp-page-handler="Csv" class="o-button__dl">CSV</button>
                        </article>
                        <div class="o-border__bold"></div>
                        <!-- ページネーション情報の設定 -->
                        <article class="p-table-sort">
                            <article class="u-wrap-mr">
                                <div class="p-datachip">
                                    <h1>
                                        表示件数
                                    </h1>
                                    <p>
                                        <select asp-for=@Model.paginationInfo.displayNumber asp-items="Model.paginationInfo.displayNumbers"
                                                onchange="submit(this.form)"></select>
                                    </p>
                                </div>
                            </article>
                            <article>
                                <article class="p-pager-num">
                                    <pagination-show-range info="@Model.paginationInfo"> </pagination-show-range>

                                </article>
                                <pagination-pager info="@Model.paginationInfo" for="@Model.paginationInfo"> </pagination-pager>

                            </article>
                        </article>
                    </article>
                    <div class="o-border__bold__sm"></div>
                </article>
                <article class="p-scroll__body right">
                    <!--
                        [tableデザインメモ]
                            1. table要素を囲っているp-tableにおいて、max-widthを指定する事で横スクロールのスクロールバーが表示される。
                        この時、max-width="9999px"に指定しておく事で表示可能な適切なサイズに表示が切り替えられる。
                        2.p-tableの要素でmarginが指定されているが、data tables側のデザインと当たってうまく表示できないため、
                        style="margin:0"で要素を上書きしてしまう。
                    -->
                    <div class="p-table" max-width="9999px">
                        <table id="searchTable" class="table-bordered table-hover" style="margin:0">
                            <thead>
                                <tr>
                                    <th style="width: 3rem;"></th>
                                    <th>▼依頼日</th>
                                    <th>▼受付番号</th>
                                    <th>▼依頼内容</th>
                                    <th>▼集配先</th>
                                    <th>▼明細数</th>
                                    <th>▼状態</th>
                                    <th>▼依頼者</th>
                                    <th>▼依頼数</th>
                                    <th>▼確定数</th>
                                </tr>
                            </thead>
                            <tbody>

                                @foreach (var item in Model.viewModel.tableRows)
                                {

                                    <tr>
                                        <td>
                                            <div>
                                                @* 資材販売の履歴では、詳細ボタンを表示しない *@
                                                @if (item.data.data.REQUEST_KIND != RazorPagesLearning.Data.DBModels.DOMAIN.RequestRequestCode.MATERIAL)
                                                {
                                                    <a href="./RequestHistoryDetail?id=@item.data.data.ID">詳細</a>
                                                }
                                            </div>
                                        </td>
                                        <td><div><!-- 依頼日 -->@RazorPagesLearning.Service.Utility.ViewHelper.HelperFunctions.toFormattedString(item.data.data.REQUEST_DATE, "yyyy/MM/dd")</div></td>
                                        <td><div><!-- 受付番号 -->@Html.DisplayFor(e => item.data.data.ORDER_NUMBER)</div></td>
                                        <td><div><!-- 依頼内容 -->@RazorPagesLearning.Service.Utility.ViewHelper.HelperFunctions.toDomainValue(Model.viewModel.requestKind, item.data.data.REQUEST_KIND)</div></td>
                                        <td><div><!-- 集配先 -->@Html.DisplayFor(e => item.data.data.SHIP_RETURN_COMPANY)</div></td>
                                        <td><div><!-- 明細数 -->@Html.DisplayFor(e => item.data.data.DETAIL_COUNT)</div></td>
                                        <td><div><!-- 状態 -->@RazorPagesLearning.Service.Utility.ViewHelper.HelperFunctions.toDomainValue(Model.viewModel.wmsStatus, item.data.data.WMS_STATUS)</div></td>
                                        <td><div><!-- 依頼者 -->@Html.DisplayFor(e => item.data.data.OWNER_CHARGE)</div></td>
                                        <td><div><!-- 依頼数 -->@Html.DisplayFor(e => item.data.data.REQUEST_COUNT)</div></td>
                                        <td><div><!-- 確定数 -->@Html.DisplayFor(e => item.data.data.CONFIRM_COUNT)</div></td>
                                    </tr>
                                }

                            </tbody>
                        </table>
                    </div>
                </article>
            </section>
        </div>
    </form>
</article>
<div class="o-button__arrow__right j-arrow__right"></div>

<!--　[開始] 集配先選択モーダル画面 -->
<partial name="PopUp/_PopSelectDerivery" for="@Model.selectDeriveryModelViewModel" />


<script>


    ///ソート用にヘッダをクリックした時の動作
    var onHeaderClickForSort = function (columnName) {

        VegaUtility.StaticFunctions.TableHelper.onTableHeaderClickForSort(
            {
                //ソート対象となる列名はhiddenフィールドに入れてサーバサイドに送り、
                //サーバー側で処理させる。
                //ソート対象の列名が入るinput要素名
                sortOrderName: "viewModel_sortOrder",
                //post対象となるフォーム名
                formName: "form",
                //ソートするカラム名
                columnName: columnName
            });
    };

    $(document).ready(function () {

        //テーブルをセットアップする
        VegaUtility.StaticFunctions.TableHelper.setupTable(
            {
                //テーブル要素のID
                tableElementID: "#searchTable",
                //テーブル共通機能領域のサイズ(縦領域算出用)
                tableCommonFunctionElementID: "#TableOperationFunctions",
                //列左端　スクロール固定列数
                leftScrollFixedColumns: 2,
                //列のデフォルトカラムサイズ(省略可)
                columnSize: [
                    { width: '1rem', targets: 0 },
                    { width: '4rem', targets: 1 }
                ]
            }
        );

        $('#ClearForm').click(function () {
            $.confirm({
                title: 'クリア',
                content: 'クリアを実行しますか？',
                buttons: {
                    'OK': function () {
                        //該当フォームに対して命令を出す
                        var tForm = $('#RequestHistoryForm');
                        tForm.attr('action', '?handler=Clear');
                        tForm.submit();
                    },
                    'キャンセル': function () {
                    }
                }
            });
        });

        // 集配先検索ボタン
        $('#DeliverySearch').click(function () {
            // todo:ダイアログ表示で検索？
            $('#RequestHistoryForm').submit();

        });
    });


    //集配先選択ポップアップを表示
    var onShowPopSelectDerivery = function () {
        VegaUtility.StaticFunctions.PopUp.show("#modal-cargo__select");
    };

    $(document).ready(function () {
        //ページを開いたら、ローディング表示を非表示に
        VegaUtility.StaticFunctions.LoadingSplash.hide();
    });
</script>